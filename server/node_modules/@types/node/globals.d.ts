// server/index.js
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

const connectDB = require('./src/config/db');
const projectRoutes = require('./src/routes/projectRoutes');
const Project = require('./src/models/Project');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Connect to MongoDB first
const mongoUri = process.env.MONGO_URI;
if (mongoUri) {
  connectDB(mongoUri);
} else {
  console.warn('MONGO_URI not set. Running with in-memory fallback (no MongoDB).');
}

// Mount routes
app.use('/api/projects', projectRoutes);

// health
app.get('/', (req, res) => res.json({ ok: true, message: 'CipherStudio server' }));

// test MongoDB route — uses a unique id so repeated calls won't cause duplicate-key errors
app.get('/api/test-db', async (req, res) => {
  try {
    if (!Project) {
      return res.status(500).json({ message: 'Project model not available (MongoDB not configured).' });
    }

    const testId = 'test_' + Date.now();
    const project = new Project({
      projectId: testId,
      name: 'Test Project',
      files: {
        '/src/index.jsx': "console.log('Hello from test')"
      },
      createdAt: new Date(),
      updatedAt: new Date()
    });

    await project.save();
    const projects = await Project.find().sort({ updatedAt: -1 }).limit(20);
    return res.json({ message: 'Database Connected ✅', inserted: testId, count: projects.length, projects });
  } catch (error) {
    console.error('test-db error', error);
    return res.status(500).json({ message: 'Database Error ❌', error: error.message || String(error) });
  }
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`CipherStudio server running on ${PORT}`));
